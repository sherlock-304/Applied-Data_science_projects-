# Import libraries here
import warnings
from glob import glob

import pandas as pd
import plotly.express as px
import seaborn as sns
from category_encoders import OneHotEncoder
from IPython.display import VimeoVideo
from ipywidgets import Dropdown, FloatSlider, IntSlider, interact
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression, Ridge  # noqa F401,]
from sklearn.metrics import mean_absolute_error
from sklearn.pipeline import make_pipeline
from sklearn.utils.validation import check_is_fitted
import matplotlib.pyplot as plt
warnings.simplefilter(action="ignore", category=FutureWarning)

# Wrangle function
def wrangle(filepath):
    df = pd.read_csv(filepath)
    mask_df = df["place_with_parent_names"].str.contains("Distrito Federal")
    mask_apt = df["property_type"] == "apartment"
    mask_price = df["price_aprox_usd"] < 100_000
    
    df = df[mask_df & mask_apt & mask_price]

    low, high = df["surface_covered_in_m2"].quantile([0.1, 0.9])
    mask_area = df["surface_covered_in_m2"].between(low, high)
    df = df[mask_area]

    df[["lat","lon"]] = df["lat-lon"].str.split(',', expand = True).astype(float)
    df.drop(columns = "lat-lon", inplace = True)

    df["borough"] = df["place_with_parent_names"].str.split('|', expand = True)[1]
    df.drop(columns = "place_with_parent_names", inplace = True)    

    df.drop(columns = [
        "surface_total_in_m2",
        "price_usd_per_m2",
        "floor",
        "rooms",
        "expenses"], inplace = True)

    df.drop(columns = ["operation", "property_type", "currency", "properati_url"], inplace = True)

    df.drop(columns = [
     'price',
     'price_aprox_local_currency',
     'price_per_m2',
       ], inplace = True)
  return df

#Sorting and merging files to create one data frame
files = glob("data/mexico-city-real-estate-*.csv")
files.sort()
files
#Concatinating dataframes 
df = pd.concat([wrangle(file)for file in files], ignore_index = True)

#histogram showing the distribution of apartment prices ("price_aprox_usd") in df. Be sure to label the x-axis "Price [$]", the y-axis "Count", and give it the title "Distribution of Apartment Prices"
fig, ax = plt.subplots() 

# Plot the histogram on the axes object
ax.hist(df["price_aprox_usd"]) 

# Label axes using the axes 
ax.set_xlabel("Price [$]")
ax.set_ylabel("Count")
# Add title 
ax.set_title("Distribution of Apartment Prices");

 #scatter plot that shows apartment price ("price_aprox_usd") as a function of apartment size ("surface_covered_in_m2")
  fig, ax = plt.subplots()

# Create the scatter plot on the axes object
ax.scatter(df["surface_covered_in_m2"], df["price_aprox_usd"])

# Label axes
ax.set_xlabel("Area [sq meters]")
ax.set_ylabel("Price [USD]")

# Add title
ax.set_title("Mexico City: Price vs. Area")

# Show the plot (if needed in your environment)
plt.show()

# Split data into feature matrix `X_train` and target vector `y_train`.
feature = ["surface_covered_in_m2", "lat", "lon", "borough"]
target = "price_aprox_usd"

X_train = df[feature]
y_train = df[target]

y_mean = y_train.mean()
y_pred_baseline = [y_mean]* len(y_train)
baseline_mae = mean_absolute_error(y_train, y_pred_baseline)
print("Mean apt price:", round(y_mean, 2))
print("Baseline MAE:", round(baseline_mae,2))

model = make_pipeline(
    OneHotEncoder(use_cat_names =  True),
    SimpleImputer(),
    Ridge()    
)
model.fit(X_train, y_train)   
X_test = pd.read_csv("data/mexico-city-test-features.csv")      
y_test_pred = pd.Series(model.predict(X_test))       

coefficients = model.named_steps["ridge"].coef_
features = model.named_steps["onehotencoder"].get_feature_names()
feat_imp = pd.Series(coefficients, index=features)
feat_imp = feat_imp.sort_values(key=abs, ascending=True)
feat_imp

fig, ax = plt.subplots()

# Horizontal bar plot on the axes object
feat_imp.sort_values(key=abs).tail(10).plot(kind="barh", ax=ax)

#  Label axes 
ax.set_xlabel("Importance [USD]") 
ax.set_ylabel("Feature")

# Add title 
ax.set_title("Feature Importances for Apartment Price");                
    
